@RestController
@RequestMapping("/auth")
public class OAuth2Controller {

    @GetMapping("/login/oauth2")
    public ResponseEntity<?> oauth2Login(OAuth2AuthenticationToken authentication) {
        // Get user details from authentication
        OAuth2User  user = authentication.getPrincipal();
        String email = user.getAttribute("email");
        String name = user.getAttribute("name");

        // Here you can create or update the user in your database
        UserResponse userResponse = userService.findOrCreateUser (email, name);

        // Generate JWT token
        String jwtToken = jwtService.generateToken(userResponse);

        return ResponseEntity.ok(new AuthResponse(jwtToken, userResponse));
    }
}









@Bean
SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    http
        .csrf(csrf -> csrf.disable())
        .cors(cors -> cors.configurationSource(corsConfigurationSource()))
        .authorizeHttpRequests((requests) -> requests
            .requestMatchers("/auth/login", "/auth/create", "/oauth2/**").permitAll()
            .anyRequest().authenticated())
        .oauth2Login(oauth2 -> oauth2
            .loginPage("/auth/login")
            .defaultSuccessUrl("/auth/login/oauth2", true))
        .sessionManagement(management -> management
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS));

    return http.build();
}












Create a DTO for Auth Response: Create a DTO to return the JWT token and user information.

java

Verify
Copy code
public class AuthResponse {
    private String token;
    private UserResponse user;

    // Getters and Setters
}















Frontend Changes
Add Google Sign-In Button: In your frontend, you can use the Google Sign-In button. You can use the Google API library to handle the sign-in process.

html

Verify
Copy code
<div id="g_id_onload"
     data-client_id="YOUR_GOOGLE_CLIENT_ID"
     data-callback="handleCredentialResponse">
</div>
<div class="g_id_signin" data-type="standard"></div>
Handle the Response: Create a JavaScript function to handle the response from Google.

javascript

Verify
Copy code
function handleCredentialResponse(response) {
    const id_token = response.credential;

    // Send the token to your backend for verification and to create a session
    fetch('/api/auth/login/oauth2', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id_token }),
    })
    .then(response => response.json())
    .then(data => {
        // Store the JWT token and user data
        localStorage.setItem('token', data.token);
        // Redirect or update UI
    })
    .catch(error => {
        console.error('Error:', error);
    });
}
Update Your Login Form: You can keep your existing login form for username/password authentication, but now you also have the option to log in with Google.








ChAtGpt

1. Add Dependencies
Add the required dependencies for OAuth2 in your pom.xml.

xml
Copy
Edit
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-oauth2-client</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-oauth2-jose</artifactId>
</dependency>
2. Update Security Configuration
Modify the SecurityConfiguration class to include OAuth2 login.

java
Copy
Edit
@Configuration
@EnableWebSecurity
public class SecurityConfiguration {
    private final JwtAuthenticationFilter jwtAuthenticationFilter;

    public SecurityConfiguration(JwtAuthenticationFilter jwtAuthenticationFilter) {
        this.jwtAuthenticationFilter = jwtAuthenticationFilter;
    }

    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            .authorizeHttpRequests(authorize -> authorize
                .requestMatchers("/auth/**", "/oauth2/**").permitAll()
                .anyRequest().authenticated()
            )
            .oauth2Login(oauth2 -> oauth2
                .loginPage("/auth/google-login")
                .defaultSuccessUrl("/auth/google-success", true)
            )
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }

    @Bean
    CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(List.of("http://localhost:3000"));
        configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"));
        configuration.setAllowedHeaders(List.of("Authorization", "Content-Type"));
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}
3. Add Properties for Google OAuth2
In your application.yml or application.properties, configure the client details provided by Google.

yaml
Copy
Edit
spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: YOUR_GOOGLE_CLIENT_ID
            client-secret: YOUR_GOOGLE_CLIENT_SECRET
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
            scope: email, profile
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
4. Controller for OAuth2 Callback
Add endpoints to handle Google OAuth2 login.

java
Copy
Edit
@RestController
@RequestMapping("/auth")
public class AuthController {
    @GetMapping("/google-success")
    public ResponseEntity<String> googleSuccess(OAuth2AuthenticationToken authenticationToken) {
        OAuth2User user = authenticationToken.getPrincipal();
        String email = user.getAttribute("email");
        String name = user.getAttribute("name");

        // Use the email or name to register or authenticate the user in your database.
        // Example: userService.findOrCreateUser(email, name);

        return ResponseEntity.ok("Login Successful: " + name + " (" + email + ")");
    }

    @GetMapping("/google-login")
    public ResponseEntity<String> googleLogin() {
        return ResponseEntity.ok("Redirecting to Google Login...");
    }
}
5. Update User Entity (Optional)
If you want to store additional Google-specific information (like profile picture), update your User entity and database schema.

java
Copy
Edit
@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String username;
    private String email;
    private String name;
    private String profilePictureUrl;

    // Add fields for OAuth2 provider
    private String provider; // e.g., "GOOGLE"

    // Other fields and getters/setters
}
Frontend Changes
1. Install Required Dependencies
Ensure your frontend has @nuxtjs/auth-next or similar for handling OAuth.

bash
Copy
Edit
npm install @nuxtjs/auth-next
2. Update Nuxt Config
Configure Google OAuth2 in nuxt.config.ts.

ts
Copy
Edit
export default defineNuxtConfig({
  modules: ['@nuxtjs/auth-next'],
  auth: {
    strategies: {
      google: {
        clientId: 'YOUR_GOOGLE_CLIENT_ID',
        codeChallengeMethod: '',
        redirectUri: 'http://localhost:3000/auth/callback',
      },
    },
  },
});
3. Add Google Login Button
In your login page (Login.vue), add a button for Google login.

html
Copy
Edit
<template>
  <div>
    <button @click="loginWithGoogle" class="google-login-btn">
      Sign in with Google
    </button>
  </div>
</template>

<script lang="ts" setup>
import { useAuth } from '@nuxtjs/auth-next';

const auth = useAuth();

const loginWithGoogle = () => {
  auth.loginWith('google');
};
</script>

<style>
.google-login-btn {
  background-color: #4285f4;
  color: white;
  padding: 10px 20px;
  border-radius: 5px;
  font-size: 16px;
  cursor: pointer;
}
</style>
4. Handle OAuth2 Redirect
Create a callback page to handle the redirect from Google.

pages/auth/callback.vue:

html
Copy
Edit
<template>
  <div>Redirecting...</div>
</template>

<script lang="ts" setup>
import { useAuth } from '@nuxtjs/auth-next';
import { useRouter } from 'vue-router';

const auth = useAuth();
const router = useRouter();

onMounted(async () => {
  try {
    await auth.handleCallback();
    router.push('/');
  } catch (error) {
    console.error('OAuth2 Login Failed:', error);
    router.push('/login');
  }
});
</script>
Final Steps
Replace YOUR_GOOGLE_CLIENT_ID and YOUR_GOOGLE_CLIENT_SECRET in both backend and frontend with values from your Google Cloud Console.
Test the login flow:
Clicking the "Sign in with Google" button redirects to Google for authentication.
After login, the user is redirected back to your application.
The backend processes the OAuth2 callback and creates/authenticates the user.
By following these steps, you'll have a working Google OAuth2 sign-in integrated into your application. Let me know if you need further assistance!