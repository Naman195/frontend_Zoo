Yes, you can store the user details and authorities inside the JWT token to avoid making a database call (loadUserByUsername) on every request. Hereâ€™s how you can do it:

Approach
Include User Details in JWT: Store the user's roles and any necessary details inside the JWT token when it is generated.
Extract User Details from JWT: Instead of calling loadUserByUsername, parse the token and retrieve user details.
Use the Extracted Details for Authentication: Create a UserDetails object directly from the extracted token data.
Implementation Steps
1. Modify JWT Generation to Include Authorities
Modify your JwtService class to include user roles in the JWT payload.

JwtService (Modify JWT Generation)
java
Copy
Edit
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

@Service
public class JwtService {
    
    private final String SECRET_KEY = "your_secret_key";  // Store this securely

    public String generateToken(UserDetails userDetails) {
        Map<String, Object> claims = Map.of(
            "roles", userDetails.getAuthorities().stream()
                                .map(GrantedAuthority::getAuthority)
                                .collect(Collectors.toList())
        );

        return Jwts.builder()
                .setClaims(claims)
                .setSubject(userDetails.getUsername())
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60)) // 1 hour expiry
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();
    }

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public List<String> extractRoles(String token) {
        Claims claims = extractAllClaims(token);
        return claims.get("roles", List.class);
    }

    public boolean isTokenValid(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }

    private boolean isTokenExpired(String token) {
        return extractClaim(token, Claims::getExpiration).before(new Date());
    }

    private <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        return Jwts.parser()
                .setSigningKey(SECRET_KEY)
                .parseClaimsJws(token)
                .getBody();
    }
}
2. Create a Custom UserDetails Class
Instead of loading from the database, create a custom UserDetails implementation that holds data extracted from the JWT.

CustomUserDetails.java
java
Copy
Edit
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

public class CustomUserDetails implements UserDetails {
    
    private final String username;
    private final Collection<? extends GrantedAuthority> authorities;

    public CustomUserDetails(String username, List<String> roles) {
        this.username = username;
        this.authorities = roles.stream()
                                .map(SimpleGrantedAuthority::new)
                                .collect(Collectors.toList());
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return authorities;
    }

    @Override
    public String getPassword() {
        return null; // No need to store password in JWT
    }

    @Override
    public String getUsername() {
        return username;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}
3. Modify JwtAuthenticationFilter to Use Extracted Data
Instead of calling userDetailsService.loadUserByUsername, extract details directly from the JWT.

JwtAuthenticationFilter.java
java
Copy
Edit
@Override
protected void doFilterInternal(
    @NonNull HttpServletRequest request,
    @NonNull HttpServletResponse response,
    @NonNull FilterChain filterChain
) throws ServletException, IOException {
    final String authHeader = request.getHeader("Authorization");

    if (authHeader == null || !authHeader.startsWith("Bearer ")) {
        filterChain.doFilter(request, response);
        return;
    }

    try {
        final String jwt = authHeader.substring(7);
        final String userEmail = jwtService.extractUsername(jwt);
        final List<String> roles = jwtService.extractRoles(jwt);

        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        if (userEmail != null && authentication == null) {
            UserDetails userDetails = new CustomUserDetails(userEmail, roles);

            if (jwtService.isTokenValid(jwt, userDetails)) {
                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                        userDetails,
                        null,
                        userDetails.getAuthorities()
                );
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authToken);
            } else {
                response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Invalid or expired token");
                return;
            }
        }

        filterChain.doFilter(request, response);
    } catch (Exception exception) {
        handlerExceptionResolver.resolveException(request, response, null, exception);
    }
}
Advantages of This Approach
âœ… Reduces Database Calls: Since roles and authorities are stored in the token, no need to query the database on each request.
âœ… Faster Authentication: Extracting user details from JWT is much faster than fetching from the database.
âœ… Scalable: Works well in distributed environments where multiple services might need user authentication.

Possible Concerns
Token Size: Storing too much data in the JWT increases its size, affecting request performance.
Token Revocation: Since tokens are stateless, revoking a token (e.g., user logs out or gets blocked) requires additional handling (e.g., storing blacklisted tokens in Redis or DB).
Security: Ensure JWT is signed and stored securely to prevent tampering.
Next Steps
If you need revokable tokens, maintain a "blacklist" in the database or Redis.
If roles change dynamically, ensure the token expiration is short enough so a user will reauthenticate when required.
Would you like to integrate token revocation handling as well? ðŸš€
