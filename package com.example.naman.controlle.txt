package com.example.naman.controllers;

import com.example.naman.services.AnimalService;
import com.example.naman.entities.Zoo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/zoos")
public class ZooController {

    @Autowired
    private AnimalService animalService;

    @GetMapping
    public List<Zoo> getAllZoos(@RequestParam("exclude") Long excludeZooId) {
        return animalService.getAllZoosExcluding(excludeZooId);
    }
}




package com.example.naman.services;

import com.example.naman.entities.Animal;
import com.example.naman.entities.Zoo;
import com.example.naman.repositories.AnimalRepository;
import com.example.naman.repositories.ZooRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AnimalService {

    @Autowired
    private AnimalRepository animalRepository;

    @Autowired
    private ZooRepository zooRepository;

    // Fetch all zoos excluding the one with the given ID
    public List<Zoo> getAllZoosExcluding(Long excludeZooId) {
        return zooRepository.findAllByIdNot(excludeZooId);
    }

    // Transfer animal to a new zoo
    public Animal transferAnimalToAnotherZoo(Long animalId, Long newZooId) {
        Animal animal = animalRepository.findById(animalId)
                .orElseThrow(() -> new RuntimeException("Animal not found"));
        
        Zoo newZoo = zooRepository.findById(newZooId)
                .orElseThrow(() -> new RuntimeException("Zoo not found"));
        
        animal.setZoo(newZoo);
        return animalRepository.save(animal);
    }
}



package com.example.naman.repositories;

import com.example.naman.entities.Zoo;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface ZooRepository extends JpaRepository<Zoo, Long> {
    List<Zoo> findAllByIdNot(Long zooId);
}


package com.example.naman.controllers;

import com.example.naman.services.AnimalService;
import com.example.naman.entities.Animal;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/animals")
public class AnimalController {

    @Autowired
    private AnimalService animalService;

    // Transfer animal to another zoo
    @PutMapping("/transfer/{animalId}/to/{newZooId}")
    public Animal transferAnimal(@PathVariable Long animalId, @PathVariable Long newZooId) {
        return animalService.transferAnimalToAnotherZoo(animalId, newZooId);
    }
}











<template>
  <div>
    <!-- Transfer Button -->
    <button @click="openTransferModal">Transfer Animal</button>

    <!-- Modal for transferring the animal -->
    <div v-if="isModalOpen" class="modal">
      <div class="modal-content">
        <h2>Transfer Animal</h2>
        <select v-model="selectedZooId">
          <option v-for="zoo in zoos" :key="zoo.zooId" :value="zoo.zooId">
            {{ zoo.zooName }}
          </option>
        </select>
        <button @click="transferAnimal">Confirm Transfer</button>
        <button @click="closeModal">Cancel</button>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { useFetch } from '@nuxt3/core';

// Reactive variables
const isModalOpen = ref(false);
const selectedZooId = ref(null);
const zoos = ref([]);

// Fetch the zoos excluding the current zoo (currentZooId)
const currentZooId = 1;  // Replace this with the actual current zoo ID
const fetchZoos = async () => {
  const { data } = await useFetch(`/api/zoos?exclude=${currentZooId}`);
  zoos.value = data;
};

// Open the modal and fetch zoos
const openTransferModal = () => {
  fetchZoos();
  isModalOpen.value = true;
};

// Close the modal
const closeModal = () => {
  isModalOpen.value = false;
};

// Send the transfer request
const transferAnimal = async () => {
  const animalId = 1;  // Replace with the actual animal ID to transfer
  const newZooId = selectedZooId.value;

  if (newZooId) {
    await useFetch(`/api/animals/transfer/${animalId}/to/${newZooId}`, {
      method: 'PUT',
    });

    closeModal();
    alert('Animal transferred successfully');
  } else {
    alert('Please select a zoo');
  }
};
</script>

<style scoped>
.modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
}
.modal-content {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  width: 300px;
}
</style>
